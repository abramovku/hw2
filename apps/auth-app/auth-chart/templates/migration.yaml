apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "auth-chart.fullname" . }}-job
spec:
  backoffLimit: 2
  template:
    metadata:
      name: {{ include "auth-chart.fullname" . }}-job
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-readiness
          image: postgres:15-alpine
          env:
            - name: POSTGRES_HOST
              value: {{ include "postgresql.fullname" . }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgresql.service.ports.postgresql | quote }}
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT;
              do echo waiting for database; sleep 2; done;
      containers:
        - name: after-install-job
          image: postgres:15-alpine
          env:
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgresql.auth.password | quote}}
          command:
            - sh
            - "-c"
            - |
              psql postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ include "postgresql.fullname" . }}:{{ .Values.postgresql.service.ports.postgresql }}/{{ .Values.postgresql.auth.database }}<<'EOF'
                DROP TABLE IF EXISTS credentials;
                CREATE TABLE IF NOT EXISTS credentials (
                  id bigserial NOT NULL PRIMARY KEY,
                  username VARCHAR (255) NOT NULL,
                  password VARCHAR (255) NOT NULL,
                  email VARCHAR (500) NOT NULL,
                  firstname VARCHAR (255) NOT NULL,
                  lastname VARCHAR (255) NOT NULL,
                  UNIQUE(username)
                );
              EOF